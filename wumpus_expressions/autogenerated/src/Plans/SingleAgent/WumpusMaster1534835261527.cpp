#include "Plans/SingleAgent/WumpusMaster1534835261527.h"
using namespace alica;
/*PROTECTED REGION ID(eph1534835261527) ENABLED START*/ //Add additional using directives here
#include <wumpus/WumpusWorldModel.h>
#include <WumpusEnums.h>
/*PROTECTED REGION END*/
namespace alicaAutogenerated
{
    //Plan:WumpusMaster

    //Check of RuntimeCondition - (Name): NewRuntimeCondition, (ConditionString): , (Comment) :  

    /* 
     * Available Vars:
     *	- ModelVar (1536152982013)
     */
    bool RunTimeCondition1536063740426::evaluate(shared_ptr<RunningPlan> rp)
    {
        /*PROTECTED REGION ID(1536063740426) ENABLED START*/
        return true;
        /*PROTECTED REGION END*/
    }

    /* generated comment
     
     Task: DefaultTask  -> EntryPoint-ID: 1534835261530

     */
    shared_ptr<UtilityFunction> UtilityFunction1534835261527::getUtilityFunction(Plan* plan)
    {
        /*PROTECTED REGION ID(1534835261527) ENABLED START*/

        shared_ptr < UtilityFunction > defaultFunction = make_shared < DefaultUtilityFunction > (plan);
        return defaultFunction;

        /*PROTECTED REGION END*/
    }

    //State: Stop in Plan: WumpusMaster

    /*
     *		
     * Transition:
     *   - Name: MISSING_NAME, ConditionString: , Comment : spawned agent 
     *
     * Plans in State: 				
     *   - Plan - (Name): SpawnAgentDefault, (PlanID): 1534835358495 
     *
     * Tasks: 
     *   - DefaultTask (1414681164704) (Entrypoint: 1534835261530)
     *
     * States:
     *   - Stop (1534835261528)
     *   - Play (1534836316488)
     *   - AgentLeftCave (1534836405246)
     *   - AgentDead (1534836429671)
     *
     * Vars:
     */
    bool TransitionCondition1537958016407::evaluate(shared_ptr<RunningPlan> rp)
    {
        /*PROTECTED REGION ID(1537958014769) ENABLED START*/
//    	return false;
        return this->wm->playground.getAgentById(this->sc->getOwnRobotID()) != nullptr;
        /*PROTECTED REGION END*/

    }

    //State: Play in Plan: WumpusMaster

    /*
     *		
     * Transition:
     *   - Name: MISSING_NAME, ConditionString: , Comment : exited response received 
     *
     * Plans in State: 				
     *   - Plan - (Name): InteractWithPlayground, (PlanID): 1534836538908 
     *
     * Tasks: 
     *   - DefaultTask (1414681164704) (Entrypoint: 1534835261530)
     *
     * States:
     *   - Stop (1534835261528)
     *   - Play (1534836316488)
     *   - AgentLeftCave (1534836405246)
     *   - AgentDead (1534836429671)
     *
     * Vars:
     */
    bool TransitionCondition1534836415069::evaluate(shared_ptr<RunningPlan> rp)
    {
        /*PROTECTED REGION ID(1534836414368) ENABLED START*/
        auto actionResponseBuffer = this->wm->wumpusSimData.getActionResponseBuffer();
        for (int i = 0; i < actionResponseBuffer->getBufferSize() - 1; ++i)
        {
            auto elem = actionResponseBuffer->getLast(i);
            if (elem == nullptr)
            {
                continue;
            }
            if (elem->isValid())
            {
                auto responses = elem->getInformation().responses;
                if (std::find(responses.begin(), responses.end(), WumpusEnums::responses::exited) != responses.end())
                {
                    std::cout << "EXITED SUCCESSFULLY" << std::endl;
                    return true;
                }

            }
        }
        return false;

        /*PROTECTED REGION END*/

    }

    /*
     *		
     * Transition:
     *   - Name: MISSING_NAME, ConditionString: , Comment : dead response received 
     *
     * Plans in State: 				
     *   - Plan - (Name): InteractWithPlayground, (PlanID): 1534836538908 
     *
     * Tasks: 
     *   - DefaultTask (1414681164704) (Entrypoint: 1534835261530)
     *
     * States:
     *   - Stop (1534835261528)
     *   - Play (1534836316488)
     *   - AgentLeftCave (1534836405246)
     *   - AgentDead (1534836429671)
     *
     * Vars:
     */
    bool TransitionCondition1534836447768::evaluate(shared_ptr<RunningPlan> rp)
    {
        /*PROTECTED REGION ID(1534836446000) ENABLED START*/
        auto actionResponseBuffer = this->wm->wumpusSimData.getActionResponseBuffer();
        for (int i = 0; i < actionResponseBuffer->getBufferSize() - 1; ++i)
        {
            auto elem = actionResponseBuffer->getLast(i);
            if (elem == nullptr)
            {
                continue;
            }
            if (elem->isValid())
            {
                auto responses = elem->getInformation().responses;
                if (std::find(responses.begin(), responses.end(), WumpusEnums::responses::dead) != responses.end())
                {
                    std::cout << "DEAD" << std::endl;
                    return true;
                }

            }
        }
        return false;

        /*PROTECTED REGION END*/

    }

//State: AgentLeftCave in Plan: WumpusMaster

//State: AgentDead in Plan: WumpusMaster

}
